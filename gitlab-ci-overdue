#!/usr/bin/env python3

import argparse
from datetime import datetime, timedelta
import sys
from typing import Any, List
from urllib.parse import quote_plus, unquote_plus

import gitlab  # type: ignore

__version__ = '0.2.1'


def parse_opts(argv):
    p = argparse.ArgumentParser(
        description='Cancel GitLab pipelines that are overdue.',
        epilog="""See
https://python-gitlab.readthedocs.io/en/stable/cli.html#cli-configuration
for information about configuration file.
        """)
    p.add_argument('project_id', help='project ID or namespace/project_path',
                   type=quote_plus)
    default_duration = 30
    p.add_argument('--allowed-duration', metavar='MINUTES', type=int,
                   default=default_duration,
                   help='how long a pipeline is allowed to run;'
                   f' default is {default_duration} minutes')
    p.add_argument('-c', '--config', metavar='PATH', help='configuration file')
    p.add_argument('-n', '--dry-run', help="don't actually cancel anything,"
                   ' just show what would be done', action='store_true')
    p.add_argument('--forks', action='store_true',
                   help='include forked projects')
    p.add_argument('-V', '--version', action='version',
                   version='%(prog)s ' + __version__)
    return p.parse_args(argv)


def pipeline_is_overdue(pipeline, allowed_duration: int) -> bool:
    assert allowed_duration > 0
    started_at = pipeline.attributes['started_at']
    # '2019-11-30T20:46:35.502Z'
    started_at = datetime.strptime(started_at.split('.')[0],
                                   '%Y-%m-%dT%H:%M:%S')
    return (datetime.now() - started_at) > timedelta(minutes=allowed_duration)


def overdue_pipelines(project, allowed_duration: int) -> List[Any]:
    res = []
    # NOTE: we only scan one page of `per_page` pipelines.
    # We assume that no other pages will contain running pipelines.
    #
    # To scan the whole list, call `.list(as_list=False)`; see
    # https://python-gitlab.readthedocs.io/en/stable/api-usage.html#pagination
    for pid in project.pipelines.list():
        if pid.attributes['status'] == 'running':
            pipeline = project.pipelines.get(pid.attributes['id'])
            if pipeline_is_overdue(pipeline, allowed_duration):
                res.append(pipeline)
    return res


def main(argv=None):
    opts = parse_opts(argv)
    kwargs = {'config_files': [opts.config]} if opts.config else {}
    try:
        gl = gitlab.Gitlab.from_config(**kwargs)
    except gitlab.config.GitlabConfigMissingError as err:
        print(err, file=sys.stderr)
        return 1
    gl.auth()

    projects = [gl.projects.get(opts.project_id, lazy=True)]
    if opts.forks:
        for pid in projects[0].forks.list(as_list=False):
            projects.append(gl.projects.get(
                pid.attributes['path_with_namespace'],
                lazy=True))

    for i, project in enumerate(projects):
        for pipeline in overdue_pipelines(project, opts.allowed_duration):
            attrs = pipeline.attributes
            label = str(attrs['id'])
            if i > 0:
                label += ' ({})'.format(unquote_plus(attrs['project_id']))
            if opts.dry_run:
                print(f'Would cancel pipeline {label}')
            else:
                print(f'Cancelling pipeline {label}')
                try:
                    pipeline.cancel()
                except gitlab.exceptions.GitlabPipelineCancelError as err:
                    print(err, file=sys.stderr)
    return 0


if __name__ == '__main__':
    sys.exit(main())
